{
  "name": "Async-task",
  "tagline": "Execute tasks asynchronous tasks on web Worker without seperate files. ",
  "body": "AsyncTask [![Travis](https://api.travis-ci.org/gorillatron/async-task.svg)](https://travis-ci.org/gorillatron/async-task) [![Code Climate](https://codeclimate.com/github/gorillatron/async-task/badges/gpa.svg)](https://codeclimate.com/github/gorillatron/async-task)\r\n=========\r\nExecute tasks asynchronous tasks without seperate files. In browsers without ```Worker``` support it fallbacks to ```iframe```.\r\n\r\nIn Nodejs it spawns a process using ```child_process```.\r\n\r\n### Install\r\n\r\n```\r\nnpm install async-task\r\n```\r\n\r\nAlso support bower\r\n\r\n```\r\nbower install async-task\r\n```\r\n\r\n### Usage\r\n```javascript\r\nvar AsyncTask = require( 'async-task' )\r\n\r\nvar task = new AsyncTask((a, b) => a + b)\r\n\r\ntask.execute(1, 2)\r\n  .then(function( result ) {\r\n    result === 3\r\n  })\r\n  .catch( handleException )\r\n```\r\n\r\n### API\r\n\r\n#### AsyncTask( doInBackground, options )\r\n\r\nCreates a new AsyncTask\r\n\r\n##### options\r\n\r\n* ```options.keepAlive``` Keep worker alive so ```.execute``` can be called multiple times.\r\n* ```options.worker``` Supply worker if you want to share worker between tasks. **NB!: termination of worker is left to the user**\r\n\r\n#### asyncTask.execute( args... ):Promise\r\n\r\nExecute the ```doInBackground``` function with supplied args.\r\n\r\n\r\n###### Sharing worker example\r\n\r\n```javascript\r\nvar AsyncTask = require( 'async-task' )\r\nvar BackgroundWorker = require( 'background-worker' )\r\n\r\nvar worker = new BackgroundWorker({})\r\n\r\nvar taskA = new AsyncTask(() => 'a', {worker})\r\n\r\nvar taskB = new AsyncTask(() => 'b', {worker})\r\n\r\n\r\nPromise.all([\r\n  taskA.execute(),\r\n  taskB.execute()\r\n]).then(function(result) {\r\n  result == [ 'a', 'b' ]\r\n  worker.terminate()\r\n})\r\n```\r\n\r\n#### Test\r\n\r\n```npm run-script test```\r\n\r\n### Roadmap\r\n\r\n* ```doInBackground``` can return a promise or maybe even a ```generator*``` so you can iterate over ```asyncTask.execute```\r\n\r\n### In the wild\r\n\r\nIf your using it in your very cool project please drop me a note on jornandretangen ```Ã t``` gmail.com\r\n\r\n*Partially made, with <3 at:*\r\n\r\n[![Foo](http://wtw.no/gfx/wtw-logo2.png)](https://github.com/wtw-software/)\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}